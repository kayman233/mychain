import Head from 'next/head';
import {
  Box,
  Divider,
  Heading,
  Text,
  Stack,
  Container,
  Link,
  Button,
  Flex,
  Icon,
  useColorMode,
  useColorModeValue,
  Input,
} from '@chakra-ui/react';
import { BsFillMoonStarsFill, BsFillSunFill } from 'react-icons/bs';
import { FaHome } from "react-icons/fa";
import {
  WalletSection,
} from '../components';
import { useBalances } from '../hooks/useBalances';
import { useState } from 'react';
import { useAA } from '../hooks/useAA';
import { useCreateAA } from '../hooks/useCreateAA';


export default function Home() {
  const { colorMode, toggleColorMode } = useColorMode();

  const [recipient, setRecipient] = useState<string | undefined>(''); 
  const [amount, setAmount] = useState<string | undefined>('');
  const [newkey, setNewkey] = useState<string | undefined>('');

  const [newFunds, setNewFunds] = useState<string | undefined>(''); 
  const [newThreshold, setNewThreshold] = useState<string | undefined>(''); 
  const [newGuardians, setNewGuardians] = useState<string[] | undefined>([]);

  const { handleCreateAA, contractAddress } = useCreateAA(newFunds, newGuardians, Number(newThreshold))
  const { pubkey, isGuardian, userPubkey, threshold, guardians, counts, votes, txHash: txHashA, contractAddressLocal, handleRecover, handleRevoke } = useAA(newkey, contractAddress);
  const { balance, txHash, result, accountBalance, handleSend, handleSendAA } = useBalances(amount, recipient, contractAddressLocal);

  return (
    <Container maxW="5xl" py={10}>
      <Head>
        <title>Client</title>
        <meta name="description" content="Generated by create cosmos app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex justifyContent="end" mb={4}>
        <Button variant="outline" px={0} onClick={toggleColorMode}>
          <Icon
            as={colorMode === 'light' ? BsFillMoonStarsFill : BsFillSunFill}
          />
        </Button>
        <Button variant="outline" px={0} ml={2} onClick={() => window.location.href = "/"}>
          <Icon
            as={FaHome}
          />
        </Button>
      </Flex>
      <WalletSection isMultiChain={false} />
      <p>
        Balance: {balance} stake 
      </p>
      <Input placeholder='Address' value={recipient} onChange={(e: any) => setRecipient(e.target.value)} />
      <Input placeholder='Amount' value={amount} onChange={(e: any) => setAmount(e.target.value)} />
      <Button onClick={() => handleSend()}>Send tokens!</Button>
      <Divider />
      <Button onClick={() => handleSendAA()}>Send tokens from AA!</Button>
      <p>txHash: {txHash}</p>
      <p>res from AA: {result}</p>
      <Divider />
      <p>pubkey: {userPubkey}</p>
      <Divider />
      <Input placeholder='New Pubkey' value={newkey} onChange={(e: any) => setNewkey(e.target.value)} />
      <Button onClick={() => handleRecover()}>Recover!</Button>
      <Button onClick={() => handleRevoke()}>Revoke!</Button>
      <p>txHash: {txHashA}</p>
      <p>isGuardian: {isGuardian ? 'yes' : 'no'}</p>
      <Box mb={3}>
        <Divider />
      </Box>
      <p>
        SmartContract: {contractAddressLocal} 
      </p>
      <p>
        Balance: {accountBalance} stake 
      </p>
      <p>
        Owner pubkey: { pubkey } 
      </p>
      <p>
        Threshold: { threshold } 
      </p>
      <p>
        Guardians: { guardians?.guardians.join(" | ") } 
      </p>
      <p>
        Counts: { counts?.map((count) => `\n ${count.pubkey}: ${count.votes}/${threshold} votes`) } 
      </p>
      <p>
        Votes: { votes?.map((vote) => `\n ${vote.addr} votes for: ${vote.vote}`) } 
      </p>
      <Box mb={3}>
        <Divider />
      </Box>
      <p>
        GenerateNew SA 
      </p>
      <Input placeholder='Threshold' value={newThreshold} onChange={(e: any) => setNewThreshold(e.target.value)} />
      <Input placeholder='Funds' value={newFunds} onChange={(e: any) => setNewFunds(e.target.value)} />
      <Input placeholder='Guardian' value={newGuardians} onChange={(e: any) => setNewGuardians([e.target.value])} />
      <Button onClick={() => handleCreateAA()}>Generate!</Button>
      <p>contractAddress: {contractAddress}</p>
      <Box mb={3}>
        <Divider />
      </Box>
      <Stack
        isInline={true}
        spacing={1}
        justifyContent="center"
        opacity={0.5}
        fontSize="sm"
      >
        <Text>Built with</Text>
        <Link
          href="https://cosmology.tech/"
          target="_blank"
          rel="noopener noreferrer"
        >
          Cosmology
        </Link>
      </Stack>
    </Container>
  );
}